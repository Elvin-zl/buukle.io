package top.buukle.opensource.generator.plus.service.util;


import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Objects;
 
 
public class MysqlExport {
 
    /**
     * 生成create语句
     *
     * @param table the table concerned
     * @param statement
     * @return String
     * @throws SQLException exception
     */
    private static String getTableInsertStatement(String table, Statement statement) throws SQLException {
 
        StringBuilder sql = new StringBuilder();
        ResultSet rs;
        boolean addIfNotExists = true;
 
 
        if (table != null && !table.isEmpty()) {
            rs = statement.executeQuery("SHOW CREATE TABLE " + "`" + table + "`;");
            while (rs.next()) {
                String qtbl = rs.getString(1);
                String query = rs.getString(2);
                sql.append("\n\n--");
                sql.append("\n").append(MysqlUtil.SQL_START_PATTERN).append("  table dump : ").append(qtbl);
                sql.append("\n--\n\n");
 
                if (addIfNotExists) {
                    query = query.trim().replace("CREATE TABLE", "CREATE TABLE IF NOT EXISTS");
                }
 
                sql.append(query).append(";\n\n");
            }
 
            sql.append("\n\n--");
            sql.append("\n").append(MysqlUtil.SQL_END_PATTERN).append("  table dump : ").append(table);
            sql.append("\n--\n\n");
        }
 
        return sql.toString();
    }
 
 
    /**
     * 生成insert语句
     *
     * @param table the table to get inserts statement for
     * @param statement
     * @return String generated SQL insert
     * @throws SQLException exception
     */
    private static String getDataInsertStatement(String table, Statement statement) throws SQLException {
        StringBuilder sql = new StringBuilder();
        ResultSet rs = statement.executeQuery("SELECT * FROM " + "`" + table + "`;");
        rs.last();
        int rowCount = rs.getRow();
        if (rowCount <= 0) {
            return sql.toString();
        }
        sql.append("\n--").append("\n-- Inserts of ").append(table).append("\n--\n\n");
        sql.append("\n/*!40000 ALTER TABLE `").append(table).append("` DISABLE KEYS */;\n");
        sql.append("\n--\n");
        sql.append(MysqlUtil.SQL_START_PATTERN).append(" table insert : ").append(table);
        sql.append("\n--\n");
 
        sql.append("INSERT INTO `").append(table).append("`(");
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();
        for (int i = 0; i < columnCount; i++) {
            sql.append("`");
            sql.append(metaData.getColumnName(i + 1));
            sql.append("`, ");
        }
        sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1).append(") VALUES \n");
        rs.beforeFirst();
        while (rs.next()) {
            sql.append("(");
            for (int i = 0; i < columnCount; i++) {
                int columnType = metaData.getColumnType(i + 1);
                int columnIndex = i + 1;
                if (Objects.isNull(rs.getObject(columnIndex))) {
                    sql.append("").append(rs.getObject(columnIndex)).append(", ");
                } else if (columnType == Types.INTEGER || columnType == Types.TINYINT || columnType == Types.BIT) {
                    sql.append(rs.getInt(columnIndex)).append(", ");
                } else {
 
                    String val = rs.getString(columnIndex);
                    val = val.replace("'", "\\'");
 
                    sql.append("'").append(val).append("', ");
                }
            }
            sql.deleteCharAt(sql.length() - 1).deleteCharAt(sql.length() - 1);
            if (rs.isLast()) {
                sql.append(")");
            } else {
                sql.append("),\n");
            }
        }
        sql.append(";");
        sql.append("\n--\n");
        sql.append(MysqlUtil.SQL_END_PATTERN).append(" table insert : ").append(table);
        sql.append("\n--\n");
        sql.append("\n/*!40000 ALTER TABLE `").append(table).append("` ENABLE KEYS */;\n");
 
        return sql.toString();
    }
 
 
    /**
     * 导出所有表的结构和数据
     *
     * @return String
     * @throws SQLException exception
     * @param database
     * @param statement
     */
    private static String exportToSql(String database, Statement statement) throws SQLException {
 
        StringBuilder sql = new StringBuilder();
        sql.append("--");
        sql.append("\n-- Generated by generator-plus");
        sql.append("\n-- Date: ").append(new SimpleDateFormat("d-M-Y H:m:s").format(new Date()));
        sql.append("\n--");
 
        sql.append("\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;");
        sql.append("\n/*!40101 SET NAMES utf8 */;");
        sql.append("\n/*!50503 SET NAMES utf8mb4 */;");
        sql.append("\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;");
        sql.append("\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;");

        List<String> tables = MysqlUtil.getAllTables(database, statement);
 
        for (String s : tables) {
            try {
                sql.append(getTableInsertStatement(s.trim(),statement));
                sql.append(getDataInsertStatement(s.trim(),statement));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
 
        sql.append("\n/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;");
        sql.append("\n/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;");
        sql.append("\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;");
 
        return sql.toString();
    }
 
    /**
     * 导出入口
     *
     * @throws IOException            exception
     * @throws SQLException           exception
     * @throws ClassNotFoundException exception
     * @param host
     * @param port
     * @param username
     * @param password
     * @param database
     * @param sqlPath
     * @param driverClassName
     */
    public static void export(String host, String port, String username, String password, String database, String sqlPath, String driverClassName) throws IOException, SQLException, ClassNotFoundException {


        Connection connection;
        connection = MysqlUtil.connectWithURL(username, password, "jdbc:mysql://" + host +  ":" + port + "/" + database + "?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=utf-8&useSSL=false&zeroDateTimeBehavior=CONVERT_TO_NULL", driverClassName);
        Statement statement = connection.createStatement();
        String sql = null;
        try {
            sql = exportToSql(database,statement);
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            statement.close();
        }
        File file = new File(sqlPath);
        if (!file.exists()) {
            boolean res = file.mkdir();
            if (!res) {
                System.out.println("Unable to create temp dir: " + file.getAbsolutePath());
                throw new IOException("Unable to create temp dir: " + file.getAbsolutePath());
            }
        }
        File sqlFolder = new File(sqlPath);
        if (!sqlFolder.exists()) {
            boolean res = sqlFolder.mkdir();
            if (!res) {
                throw new IOException(": Unable to create temp dir: " + file.getAbsolutePath());
            }
        }
        FileOutputStream outputStream = new FileOutputStream(sqlPath + "/" + database + ".sql");
        outputStream.write(sql.getBytes());
        outputStream.close();
    }

}